{"version":3,"sources":["components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/Loader/Loader.js","components/Button/Button.js","services/picturesApi.js","components/ImageGallery/ImageGallery.js","components/Modal/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["Searchbar","onSubmit","useState","query","setQuery","className","evt","preventDefault","trim","toast","info","type","onChange","currentTarget","value","toLowerCase","name","autoComplete","autoFocus","placeholder","ImageGalleryItem","pictures","onClick","map","picture","src","webformatURL","alt","tags","id","Loader","color","height","width","timeout","Button","fetchPicture","page","fetch","then","response","ok","json","Promise","reject","Error","ImageGallery","setPictures","error","setError","setPage","status","setStatus","prevQueryIdRef","useRef","useEffect","current","prevQueryId","prevPageIdRef","prevPageId","picturesApi","picturesArray","hits","autoScroll","catch","window","scrollTo","top","document","documentElement","scrollHeight","behavior","length","message","Modal","modalPicture","onClose","addEventListener","handleKeyDown","removeEventListener","e","code","target","largeImageURL","App","pictureQuery","setPictureQeury","showModal","setShowModal","setModalPicture","position","autoClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5d2c096d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './Searchbar.css';\n\nfunction Searchbar ({onSubmit}) {\n  const [query, setQuery] = useState('');\n\n  const handlePictureChange = (evt) => {\n    setQuery(evt.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if(query.trim() === '') {\n        return toast.info('Write down something to find a picture');\n    };\n\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={handleSubmit}>\n            <button type=\"submit\" className=\"SearchForm-button\">\n                <span className=\"SearchForm-button-label\">Search</span>\n            </button>\n            \n            <input\n                className=\"SearchForm-input\"\n                onChange={handlePictureChange}\n                type=\"text\"\n                name=\"query\"\n                value={query}\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search images and photos\"\n            />\n        </form>\n    </header>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default Searchbar;","import PropTypes from 'prop-types';\nimport './ImageGalleryItem.css'\n\nfunction ImageGalleryItem ({pictures, onClick}) {\n    return (\n        pictures.map(picture => (\n            <li key={picture.id} className=\"ImageGalleryItem\">\n                <img onClick={() => onClick(picture)} src={picture.webformatURL} alt={picture.tags} className=\"ImageGalleryItem-image\" />\n            </li>\n        )) \n    )\n};\n\nImageGalleryItem.propTypes = {\n    picture: PropTypes.arrayOf(PropTypes.object),\n    onClick: PropTypes.func,\n};\n\nexport default ImageGalleryItem;","import React from 'react';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport LoaderSpinner from \"react-loader-spinner\";\nimport './Loader.css';\n\nexport default function Loader () {\n    return (\n        <div className=\"Loader\">\n            <LoaderSpinner\n                type=\"Circles\"\n                color=\"#3f51b5\"\n                height={100}\n                width={100}\n                timeout={5000}\n                margin-left={300} \n            />\n        </div>\n        \n    );\n} \n\n","import PropTypes from 'prop-types';\nimport './Button.css';\n\nfunction Button ({onClick}) {\n    return (\n        <button \n            onClick={onClick}\n            className=\"Button\" \n            type=\"button\">\n                Load more\n        </button> \n    )\n};\n\nButton.propTypes = {\n    onClick: PropTypes.func,\n};\n\nexport default Button;","const BASE_URL = 'https://pixabay.com/api/';\nconst API_KEY = '22334944-1a4c27752b28577a34c92f730';\n\nexport default function fetchPicture (query, page) {\n    return fetch(`${BASE_URL}?q=${query}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`)\n    .then(response => {\n        if(response.ok) {\n            return response.json()\n        }\n        return Promise.reject(new Error(`There are no pictures with ${query}`));\n    });\n}","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport ImageGalleryItem from '../ImageGalleryItem';\nimport Loader from '../../components/Loader';\nimport Button from '../Button';\nimport picturesApi from '../../services/picturesApi';\nimport './ImageGallery.css';\n\n\nfunction ImageGallery ({query, onClick}) {\n  const [pictures, setPictures] = useState([]);\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(1);\n  const [status, setStatus] = useState('idle');\n\n  const prevQueryIdRef = useRef();\n  useEffect(() => {\n    prevQueryIdRef.current = query;\n  });\n  const prevQueryId = prevQueryIdRef.current;\n\n  const prevPageIdRef = useRef();\n  useEffect(() => {\n    prevPageIdRef.current = page;\n  });\n  const prevPageId = prevPageIdRef.current;\n\n  useEffect(() => {\n    \n    if(!query) {\n      return\n    } \n\n    if(prevQueryId !== query) {\n      setStatus('pending');\n      setPictures([]);\n      setPage(1);\n      picturesApi(query, page).then(pictures => {\n        const picturesArray = pictures.hits;\n        setPictures(pictures => [...pictures, ...picturesArray]);\n        setStatus('resolved');\n        autoScroll();\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n      }); \n    };\n\n    if(prevPageId !== page && page > 1) {\n      setStatus('pending');\n      picturesApi(query, page).then(pictures => {\n        const picturesArray = pictures.hits;\n        setPictures(pictures => [...pictures, ...picturesArray]);\n        setStatus('resolved');\n        autoScroll();\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n      }); \n\n    };\n  }, [query, prevQueryId, page, prevPageId]);\n\n  const autoScroll = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    });\n  };\n\n  const handleLoadMore = () => {\n      setPage(page => page + 1); \n  };\n\n  if(status === 'idle') {\n    return <div className=\"Warning\">Write down the word to start searching for pictures</div>\n  }\n\n  if(status === 'pending') {\n    return (\n      <>\n        {pictures.length > 12 && <ul className=\"ImageGallery\">\n            <ImageGalleryItem pictures={pictures} onClick={onClick}/>\n        </ul>}\n        <Loader />\n      </>\n    )\n  }\n\n  if(status === 'rejected') {\n    return toast.error(error.message)\n  }\n\n  if(status === 'resolved') {\n    return (\n        <>\n        <ul className=\"ImageGallery\">\n            <ImageGalleryItem pictures={pictures} onClick={onClick}/>\n        </ul>\n\n        {pictures.length > 0 \n            ? <Button onClick={handleLoadMore} /> \n            : <div className=\"Warning\">You have to write down right word for search</div>}\n        </>\n    )\n  }\n};\n\nImageGallery.propTypes = {\n    query: PropTypes.string,\n    openModal: PropTypes.func,\n};\n\nexport default ImageGallery;","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './Modal.css';\n\nfunction Modal ({modalPicture, onClose}) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    return() => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  })\n\n  const handleKeyDown = (e) => {\n    if(e.code === 'Escape' || e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  const handleOverlayClick = (e) => {\n    if(e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return (\n    <div className=\"Overlay\" onClick={handleOverlayClick}>\n        <div className=\"Modal\">\n            <img className=\"Modal__Picture\" src={modalPicture.largeImageURL} alt={modalPicture.tags} />\n        </div>\n    </div>\n  );\n}\n\nModal.propTypes = {\n  modalPicture: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nexport default Modal;","import React, { useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\nimport Modal from './components/Modal';\nimport './App.css';\n\nfunction App () {\n  const [pictureQuery, setPictureQeury] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [modalPicture, setModalPicture] = useState('');\n\n  const handleFormSubmit = (pictureQuery) => {\n    setPictureQeury(pictureQuery);\n  };\n\n  const openModal = (modalPicture) => {\n    setModalPicture(modalPicture);\n    setShowModal(true);\n  };\n\n  const closeModal = () => {\n    setShowModal(false)\n  };\n\n  return (\n    <div>\n      <Searchbar onSubmit={handleFormSubmit} />\n      <ImageGallery query={pictureQuery} onClick={openModal}/>\n      {showModal && <Modal modalPicture={modalPicture} onClose={closeModal}/>}\n      <ToastContainer position=\"top-center\" autoClose={2000}/>\n    </div>\n  )\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}